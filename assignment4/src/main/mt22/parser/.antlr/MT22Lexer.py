# Generated from d://STUDY//UNIVERSITY//HK233//PPL//ASS//ass4//assignment4//src//main//mt22//parser//MT22.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,57,444,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,
        1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
        1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,
        5,47,312,8,47,10,47,12,47,315,9,47,1,48,1,48,1,48,3,48,320,8,48,
        1,48,5,48,323,8,48,10,48,12,48,326,9,48,3,48,328,8,48,1,49,1,49,
        5,49,332,8,49,10,49,12,49,335,9,49,1,50,1,50,3,50,339,8,50,1,50,
        4,50,342,8,50,11,50,12,50,343,1,51,1,51,1,51,1,52,1,52,1,52,3,52,
        352,8,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,360,8,52,1,52,1,52,1,
        53,1,53,1,53,1,53,3,53,368,8,53,1,54,1,54,1,54,1,55,1,55,5,55,375,
        8,55,10,55,12,55,378,9,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,5,56,
        387,8,56,10,56,12,56,390,9,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,
        1,57,1,57,5,57,401,8,57,10,57,12,57,404,9,57,1,57,1,57,1,58,4,58,
        409,8,58,11,58,12,58,410,1,58,1,58,1,59,1,59,5,59,417,8,59,10,59,
        12,59,420,9,59,1,59,1,59,1,59,3,59,425,8,59,1,59,1,59,1,60,1,60,
        1,60,1,61,1,61,5,61,434,8,61,10,61,12,61,437,9,61,1,61,1,61,1,61,
        1,62,1,62,1,62,1,388,0,63,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,43,87,44,89,45,91,46,93,47,95,48,97,0,99,0,101,0,103,49,105,
        50,107,0,109,0,111,51,113,52,115,53,117,54,119,55,121,0,123,56,125,
        57,1,0,12,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,
        0,49,57,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,12,
        13,34,34,92,92,7,0,39,39,92,92,98,98,102,102,110,110,114,114,116,
        116,2,0,10,10,13,13,3,0,8,10,12,13,32,32,1,1,10,10,8,0,34,34,39,
        39,92,92,98,98,102,102,110,110,114,114,116,116,456,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
        1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
        1,0,0,0,0,95,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,111,1,0,0,0,0,
        113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,123,1,0,
        0,0,0,125,1,0,0,0,1,127,1,0,0,0,3,132,1,0,0,0,5,138,1,0,0,0,7,146,
        1,0,0,0,9,149,1,0,0,0,11,154,1,0,0,0,13,160,1,0,0,0,15,166,1,0,0,
        0,17,170,1,0,0,0,19,179,1,0,0,0,21,182,1,0,0,0,23,190,1,0,0,0,25,
        197,1,0,0,0,27,204,1,0,0,0,29,209,1,0,0,0,31,215,1,0,0,0,33,220,
        1,0,0,0,35,224,1,0,0,0,37,233,1,0,0,0,39,236,1,0,0,0,41,244,1,0,
        0,0,43,250,1,0,0,0,45,252,1,0,0,0,47,254,1,0,0,0,49,256,1,0,0,0,
        51,258,1,0,0,0,53,260,1,0,0,0,55,262,1,0,0,0,57,265,1,0,0,0,59,268,
        1,0,0,0,61,271,1,0,0,0,63,274,1,0,0,0,65,276,1,0,0,0,67,279,1,0,
        0,0,69,281,1,0,0,0,71,284,1,0,0,0,73,287,1,0,0,0,75,289,1,0,0,0,
        77,291,1,0,0,0,79,293,1,0,0,0,81,295,1,0,0,0,83,297,1,0,0,0,85,299,
        1,0,0,0,87,301,1,0,0,0,89,303,1,0,0,0,91,305,1,0,0,0,93,307,1,0,
        0,0,95,309,1,0,0,0,97,327,1,0,0,0,99,329,1,0,0,0,101,336,1,0,0,0,
        103,345,1,0,0,0,105,359,1,0,0,0,107,367,1,0,0,0,109,369,1,0,0,0,
        111,372,1,0,0,0,113,382,1,0,0,0,115,396,1,0,0,0,117,408,1,0,0,0,
        119,414,1,0,0,0,121,428,1,0,0,0,123,431,1,0,0,0,125,441,1,0,0,0,
        127,128,5,97,0,0,128,129,5,117,0,0,129,130,5,116,0,0,130,131,5,111,
        0,0,131,2,1,0,0,0,132,133,5,98,0,0,133,134,5,114,0,0,134,135,5,101,
        0,0,135,136,5,97,0,0,136,137,5,107,0,0,137,4,1,0,0,0,138,139,5,98,
        0,0,139,140,5,111,0,0,140,141,5,111,0,0,141,142,5,108,0,0,142,143,
        5,101,0,0,143,144,5,97,0,0,144,145,5,110,0,0,145,6,1,0,0,0,146,147,
        5,100,0,0,147,148,5,111,0,0,148,8,1,0,0,0,149,150,5,101,0,0,150,
        151,5,108,0,0,151,152,5,115,0,0,152,153,5,101,0,0,153,10,1,0,0,0,
        154,155,5,102,0,0,155,156,5,97,0,0,156,157,5,108,0,0,157,158,5,115,
        0,0,158,159,5,101,0,0,159,12,1,0,0,0,160,161,5,102,0,0,161,162,5,
        108,0,0,162,163,5,111,0,0,163,164,5,97,0,0,164,165,5,116,0,0,165,
        14,1,0,0,0,166,167,5,102,0,0,167,168,5,111,0,0,168,169,5,114,0,0,
        169,16,1,0,0,0,170,171,5,102,0,0,171,172,5,117,0,0,172,173,5,110,
        0,0,173,174,5,99,0,0,174,175,5,116,0,0,175,176,5,105,0,0,176,177,
        5,111,0,0,177,178,5,110,0,0,178,18,1,0,0,0,179,180,5,105,0,0,180,
        181,5,102,0,0,181,20,1,0,0,0,182,183,5,105,0,0,183,184,5,110,0,0,
        184,185,5,116,0,0,185,186,5,101,0,0,186,187,5,103,0,0,187,188,5,
        101,0,0,188,189,5,114,0,0,189,22,1,0,0,0,190,191,5,114,0,0,191,192,
        5,101,0,0,192,193,5,116,0,0,193,194,5,117,0,0,194,195,5,114,0,0,
        195,196,5,110,0,0,196,24,1,0,0,0,197,198,5,115,0,0,198,199,5,116,
        0,0,199,200,5,114,0,0,200,201,5,105,0,0,201,202,5,110,0,0,202,203,
        5,103,0,0,203,26,1,0,0,0,204,205,5,116,0,0,205,206,5,114,0,0,206,
        207,5,117,0,0,207,208,5,101,0,0,208,28,1,0,0,0,209,210,5,119,0,0,
        210,211,5,104,0,0,211,212,5,105,0,0,212,213,5,108,0,0,213,214,5,
        101,0,0,214,30,1,0,0,0,215,216,5,118,0,0,216,217,5,111,0,0,217,218,
        5,105,0,0,218,219,5,100,0,0,219,32,1,0,0,0,220,221,5,111,0,0,221,
        222,5,117,0,0,222,223,5,116,0,0,223,34,1,0,0,0,224,225,5,99,0,0,
        225,226,5,111,0,0,226,227,5,110,0,0,227,228,5,116,0,0,228,229,5,
        105,0,0,229,230,5,110,0,0,230,231,5,117,0,0,231,232,5,101,0,0,232,
        36,1,0,0,0,233,234,5,111,0,0,234,235,5,102,0,0,235,38,1,0,0,0,236,
        237,5,105,0,0,237,238,5,110,0,0,238,239,5,104,0,0,239,240,5,101,
        0,0,240,241,5,114,0,0,241,242,5,105,0,0,242,243,5,116,0,0,243,40,
        1,0,0,0,244,245,5,97,0,0,245,246,5,114,0,0,246,247,5,114,0,0,247,
        248,5,97,0,0,248,249,5,121,0,0,249,42,1,0,0,0,250,251,5,43,0,0,251,
        44,1,0,0,0,252,253,5,45,0,0,253,46,1,0,0,0,254,255,5,42,0,0,255,
        48,1,0,0,0,256,257,5,47,0,0,257,50,1,0,0,0,258,259,5,37,0,0,259,
        52,1,0,0,0,260,261,5,33,0,0,261,54,1,0,0,0,262,263,5,38,0,0,263,
        264,5,38,0,0,264,56,1,0,0,0,265,266,5,124,0,0,266,267,5,124,0,0,
        267,58,1,0,0,0,268,269,5,61,0,0,269,270,5,61,0,0,270,60,1,0,0,0,
        271,272,5,33,0,0,272,273,5,61,0,0,273,62,1,0,0,0,274,275,5,60,0,
        0,275,64,1,0,0,0,276,277,5,60,0,0,277,278,5,61,0,0,278,66,1,0,0,
        0,279,280,5,62,0,0,280,68,1,0,0,0,281,282,5,62,0,0,282,283,5,61,
        0,0,283,70,1,0,0,0,284,285,5,58,0,0,285,286,5,58,0,0,286,72,1,0,
        0,0,287,288,5,40,0,0,288,74,1,0,0,0,289,290,5,41,0,0,290,76,1,0,
        0,0,291,292,5,91,0,0,292,78,1,0,0,0,293,294,5,93,0,0,294,80,1,0,
        0,0,295,296,5,46,0,0,296,82,1,0,0,0,297,298,5,44,0,0,298,84,1,0,
        0,0,299,300,5,59,0,0,300,86,1,0,0,0,301,302,5,58,0,0,302,88,1,0,
        0,0,303,304,5,123,0,0,304,90,1,0,0,0,305,306,5,125,0,0,306,92,1,
        0,0,0,307,308,5,61,0,0,308,94,1,0,0,0,309,313,7,0,0,0,310,312,7,
        1,0,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,
        0,0,0,314,96,1,0,0,0,315,313,1,0,0,0,316,328,5,48,0,0,317,324,7,
        2,0,0,318,320,5,95,0,0,319,318,1,0,0,0,319,320,1,0,0,0,320,321,1,
        0,0,0,321,323,7,3,0,0,322,319,1,0,0,0,323,326,1,0,0,0,324,322,1,
        0,0,0,324,325,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,327,316,1,
        0,0,0,327,317,1,0,0,0,328,98,1,0,0,0,329,333,3,81,40,0,330,332,7,
        3,0,0,331,330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,
        0,0,0,334,100,1,0,0,0,335,333,1,0,0,0,336,338,7,4,0,0,337,339,7,
        5,0,0,338,337,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,342,7,
        3,0,0,341,340,1,0,0,0,342,343,1,0,0,0,343,341,1,0,0,0,343,344,1,
        0,0,0,344,102,1,0,0,0,345,346,3,97,48,0,346,347,6,51,0,0,347,104,
        1,0,0,0,348,349,3,97,48,0,349,351,3,99,49,0,350,352,3,101,50,0,351,
        350,1,0,0,0,351,352,1,0,0,0,352,360,1,0,0,0,353,354,3,99,49,0,354,
        355,3,101,50,0,355,360,1,0,0,0,356,357,3,97,48,0,357,358,3,101,50,
        0,358,360,1,0,0,0,359,348,1,0,0,0,359,353,1,0,0,0,359,356,1,0,0,
        0,360,361,1,0,0,0,361,362,6,52,1,0,362,106,1,0,0,0,363,368,8,6,0,
        0,364,368,3,109,54,0,365,366,5,92,0,0,366,368,5,34,0,0,367,363,1,
        0,0,0,367,364,1,0,0,0,367,365,1,0,0,0,368,108,1,0,0,0,369,370,5,
        92,0,0,370,371,7,7,0,0,371,110,1,0,0,0,372,376,5,34,0,0,373,375,
        3,107,53,0,374,373,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,
        1,0,0,0,377,379,1,0,0,0,378,376,1,0,0,0,379,380,5,34,0,0,380,381,
        6,55,2,0,381,112,1,0,0,0,382,383,5,47,0,0,383,384,5,42,0,0,384,388,
        1,0,0,0,385,387,9,0,0,0,386,385,1,0,0,0,387,390,1,0,0,0,388,389,
        1,0,0,0,388,386,1,0,0,0,389,391,1,0,0,0,390,388,1,0,0,0,391,392,
        5,42,0,0,392,393,5,47,0,0,393,394,1,0,0,0,394,395,6,56,3,0,395,114,
        1,0,0,0,396,397,5,47,0,0,397,398,5,47,0,0,398,402,1,0,0,0,399,401,
        8,8,0,0,400,399,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,
        1,0,0,0,403,405,1,0,0,0,404,402,1,0,0,0,405,406,6,57,3,0,406,116,
        1,0,0,0,407,409,7,9,0,0,408,407,1,0,0,0,409,410,1,0,0,0,410,408,
        1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,413,6,58,3,0,413,118,
        1,0,0,0,414,418,5,34,0,0,415,417,3,107,53,0,416,415,1,0,0,0,417,
        420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,424,1,0,0,0,420,
        418,1,0,0,0,421,425,7,10,0,0,422,423,5,13,0,0,423,425,5,10,0,0,424,
        421,1,0,0,0,424,422,1,0,0,0,425,426,1,0,0,0,426,427,6,59,4,0,427,
        120,1,0,0,0,428,429,5,92,0,0,429,430,8,11,0,0,430,122,1,0,0,0,431,
        435,5,34,0,0,432,434,3,107,53,0,433,432,1,0,0,0,434,437,1,0,0,0,
        435,433,1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,435,1,0,0,0,
        438,439,3,121,60,0,439,440,6,61,5,0,440,124,1,0,0,0,441,442,9,0,
        0,0,442,443,6,62,6,0,443,126,1,0,0,0,18,0,313,319,324,327,333,338,
        343,351,359,367,376,388,402,410,418,424,435,7,1,51,0,1,52,1,1,55,
        2,6,0,0,1,59,3,1,61,4,1,62,5
    ]

class MT22Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    AUTO = 1
    BREAK = 2
    BOOLEAN = 3
    DO = 4
    ELSE = 5
    FALSE = 6
    FLOAT = 7
    FOR = 8
    FUNCTION = 9
    IF = 10
    INTEGER = 11
    RETURN = 12
    STRING = 13
    TRUE = 14
    WHILE = 15
    VOID = 16
    OUT = 17
    CONTINUE = 18
    OF = 19
    INHERIT = 20
    ARRAY = 21
    ADD = 22
    SUB = 23
    MUL = 24
    DIV = 25
    MOD = 26
    NOT = 27
    AND = 28
    OR = 29
    EQUAL = 30
    DIFF = 31
    LT = 32
    LTE = 33
    GT = 34
    GTE = 35
    CONCAT = 36
    LP = 37
    RP = 38
    LSB = 39
    RSB = 40
    POINT = 41
    COMMA = 42
    SEMI = 43
    COLON = 44
    LCB = 45
    RCB = 46
    ASSIGN = 47
    ID = 48
    INT_LIT = 49
    FLOAT_LIT = 50
    STR_LIT = 51
    COMMENT = 52
    INLINE_COMMENT = 53
    WS = 54
    UNCLOSE_STRING = 55
    ILLEGAL_ESCAPE = 56
    ERROR_CHAR = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'auto'", "'break'", "'boolean'", "'do'", "'else'", "'false'", 
            "'float'", "'for'", "'function'", "'if'", "'integer'", "'return'", 
            "'string'", "'true'", "'while'", "'void'", "'out'", "'continue'", 
            "'of'", "'inherit'", "'array'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'!'", "'&&'", "'||'", "'=='", "'!='", "'<'", "'<='", 
            "'>'", "'>='", "'::'", "'('", "')'", "'['", "']'", "'.'", "','", 
            "';'", "':'", "'{'", "'}'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "AUTO", "BREAK", "BOOLEAN", "DO", "ELSE", "FALSE", "FLOAT", 
            "FOR", "FUNCTION", "IF", "INTEGER", "RETURN", "STRING", "TRUE", 
            "WHILE", "VOID", "OUT", "CONTINUE", "OF", "INHERIT", "ARRAY", 
            "ADD", "SUB", "MUL", "DIV", "MOD", "NOT", "AND", "OR", "EQUAL", 
            "DIFF", "LT", "LTE", "GT", "GTE", "CONCAT", "LP", "RP", "LSB", 
            "RSB", "POINT", "COMMA", "SEMI", "COLON", "LCB", "RCB", "ASSIGN", 
            "ID", "INT_LIT", "FLOAT_LIT", "STR_LIT", "COMMENT", "INLINE_COMMENT", 
            "WS", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "AUTO", "BREAK", "BOOLEAN", "DO", "ELSE", "FALSE", "FLOAT", 
                  "FOR", "FUNCTION", "IF", "INTEGER", "RETURN", "STRING", 
                  "TRUE", "WHILE", "VOID", "OUT", "CONTINUE", "OF", "INHERIT", 
                  "ARRAY", "ADD", "SUB", "MUL", "DIV", "MOD", "NOT", "AND", 
                  "OR", "EQUAL", "DIFF", "LT", "LTE", "GT", "GTE", "CONCAT", 
                  "LP", "RP", "LSB", "RSB", "POINT", "COMMA", "SEMI", "COLON", 
                  "LCB", "RCB", "ASSIGN", "ID", "INT_PART", "DEC_PART", 
                  "EXP_PART", "INT_LIT", "FLOAT_LIT", "STR_CHAR", "ESC_SEQ", 
                  "STR_LIT", "COMMENT", "INLINE_COMMENT", "WS", "UNCLOSE_STRING", 
                  "ILLEGAL_ESC", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "MT22.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[51] = self.INT_LIT_action 
            actions[52] = self.FLOAT_LIT_action 
            actions[55] = self.STR_LIT_action 
            actions[59] = self.UNCLOSE_STRING_action 
            actions[61] = self.ILLEGAL_ESCAPE_action 
            actions[62] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text.replace('_', '')
     

    def FLOAT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text.replace('_', '')
     

    def STR_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            if self.text[-1] == '\n':
            	if self.text[-2] == '\r':
            		raise UncloseString(self.text[1:-2]);
            	else:
            		raise UncloseString(self.text[1:-1]);
            else:
            	raise UncloseString(self.text[1:]);

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            raise IllegalEscape(self.text[1:])
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            raise ErrorToken(self.text)
     


