# Generated from d://STUDY//UNIVERSITY//HK233//PPL//ASS//ass1//assignment1-initial//src//main//mt22//parser//MT22.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,58,450,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,3,0,
        132,8,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
        1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
        1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,
        1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,
        1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,
        1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,
        1,45,1,46,1,46,1,47,1,47,1,48,1,48,5,48,318,8,48,10,48,12,48,321,
        9,48,1,49,1,49,1,49,3,49,326,8,49,1,49,5,49,329,8,49,10,49,12,49,
        332,9,49,3,49,334,8,49,1,50,1,50,5,50,338,8,50,10,50,12,50,341,9,
        50,1,51,1,51,3,51,345,8,51,1,51,4,51,348,8,51,11,51,12,51,349,1,
        52,1,52,1,52,1,53,1,53,1,53,3,53,358,8,53,1,53,1,53,1,53,1,53,1,
        53,1,53,3,53,366,8,53,1,53,1,53,1,54,1,54,1,54,1,54,3,54,374,8,54,
        1,55,1,55,1,55,1,56,1,56,5,56,381,8,56,10,56,12,56,384,9,56,1,56,
        1,56,1,56,1,57,1,57,1,57,1,57,5,57,393,8,57,10,57,12,57,396,9,57,
        1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,407,8,58,10,58,
        12,58,410,9,58,1,58,1,58,1,59,4,59,415,8,59,11,59,12,59,416,1,59,
        1,59,1,60,1,60,5,60,423,8,60,10,60,12,60,426,9,60,1,60,1,60,1,60,
        3,60,431,8,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,5,62,440,8,62,10,
        62,12,62,443,9,62,1,62,1,62,1,62,1,63,1,63,1,63,1,394,0,64,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
        95,48,97,49,99,0,101,0,103,0,105,50,107,51,109,0,111,0,113,52,115,
        53,117,54,119,55,121,56,123,0,125,57,127,58,1,0,12,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,2,0,69,
        69,101,101,2,0,43,43,45,45,4,0,10,10,12,13,34,34,92,92,7,0,39,39,
        92,92,98,98,102,102,110,110,114,114,116,116,2,0,10,10,13,13,3,0,
        8,10,12,13,32,32,1,1,10,10,8,0,34,34,39,39,92,92,98,98,102,102,110,
        110,114,114,116,116,463,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
        1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
        0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,125,1,0,0,0,0,127,1,
        0,0,0,1,131,1,0,0,0,3,133,1,0,0,0,5,138,1,0,0,0,7,144,1,0,0,0,9,
        152,1,0,0,0,11,155,1,0,0,0,13,160,1,0,0,0,15,166,1,0,0,0,17,172,
        1,0,0,0,19,176,1,0,0,0,21,185,1,0,0,0,23,188,1,0,0,0,25,196,1,0,
        0,0,27,203,1,0,0,0,29,210,1,0,0,0,31,215,1,0,0,0,33,221,1,0,0,0,
        35,226,1,0,0,0,37,230,1,0,0,0,39,239,1,0,0,0,41,242,1,0,0,0,43,250,
        1,0,0,0,45,256,1,0,0,0,47,258,1,0,0,0,49,260,1,0,0,0,51,262,1,0,
        0,0,53,264,1,0,0,0,55,266,1,0,0,0,57,268,1,0,0,0,59,271,1,0,0,0,
        61,274,1,0,0,0,63,277,1,0,0,0,65,280,1,0,0,0,67,282,1,0,0,0,69,285,
        1,0,0,0,71,287,1,0,0,0,73,290,1,0,0,0,75,293,1,0,0,0,77,295,1,0,
        0,0,79,297,1,0,0,0,81,299,1,0,0,0,83,301,1,0,0,0,85,303,1,0,0,0,
        87,305,1,0,0,0,89,307,1,0,0,0,91,309,1,0,0,0,93,311,1,0,0,0,95,313,
        1,0,0,0,97,315,1,0,0,0,99,333,1,0,0,0,101,335,1,0,0,0,103,342,1,
        0,0,0,105,351,1,0,0,0,107,365,1,0,0,0,109,373,1,0,0,0,111,375,1,
        0,0,0,113,378,1,0,0,0,115,388,1,0,0,0,117,402,1,0,0,0,119,414,1,
        0,0,0,121,420,1,0,0,0,123,434,1,0,0,0,125,437,1,0,0,0,127,447,1,
        0,0,0,129,132,3,29,14,0,130,132,3,13,6,0,131,129,1,0,0,0,131,130,
        1,0,0,0,132,2,1,0,0,0,133,134,5,97,0,0,134,135,5,117,0,0,135,136,
        5,116,0,0,136,137,5,111,0,0,137,4,1,0,0,0,138,139,5,98,0,0,139,140,
        5,114,0,0,140,141,5,101,0,0,141,142,5,97,0,0,142,143,5,107,0,0,143,
        6,1,0,0,0,144,145,5,98,0,0,145,146,5,111,0,0,146,147,5,111,0,0,147,
        148,5,108,0,0,148,149,5,101,0,0,149,150,5,97,0,0,150,151,5,110,0,
        0,151,8,1,0,0,0,152,153,5,100,0,0,153,154,5,111,0,0,154,10,1,0,0,
        0,155,156,5,101,0,0,156,157,5,108,0,0,157,158,5,115,0,0,158,159,
        5,101,0,0,159,12,1,0,0,0,160,161,5,102,0,0,161,162,5,97,0,0,162,
        163,5,108,0,0,163,164,5,115,0,0,164,165,5,101,0,0,165,14,1,0,0,0,
        166,167,5,102,0,0,167,168,5,108,0,0,168,169,5,111,0,0,169,170,5,
        97,0,0,170,171,5,116,0,0,171,16,1,0,0,0,172,173,5,102,0,0,173,174,
        5,111,0,0,174,175,5,114,0,0,175,18,1,0,0,0,176,177,5,102,0,0,177,
        178,5,117,0,0,178,179,5,110,0,0,179,180,5,99,0,0,180,181,5,116,0,
        0,181,182,5,105,0,0,182,183,5,111,0,0,183,184,5,110,0,0,184,20,1,
        0,0,0,185,186,5,105,0,0,186,187,5,102,0,0,187,22,1,0,0,0,188,189,
        5,105,0,0,189,190,5,110,0,0,190,191,5,116,0,0,191,192,5,101,0,0,
        192,193,5,103,0,0,193,194,5,101,0,0,194,195,5,114,0,0,195,24,1,0,
        0,0,196,197,5,114,0,0,197,198,5,101,0,0,198,199,5,116,0,0,199,200,
        5,117,0,0,200,201,5,114,0,0,201,202,5,110,0,0,202,26,1,0,0,0,203,
        204,5,115,0,0,204,205,5,116,0,0,205,206,5,114,0,0,206,207,5,105,
        0,0,207,208,5,110,0,0,208,209,5,103,0,0,209,28,1,0,0,0,210,211,5,
        116,0,0,211,212,5,114,0,0,212,213,5,117,0,0,213,214,5,101,0,0,214,
        30,1,0,0,0,215,216,5,119,0,0,216,217,5,104,0,0,217,218,5,105,0,0,
        218,219,5,108,0,0,219,220,5,101,0,0,220,32,1,0,0,0,221,222,5,118,
        0,0,222,223,5,111,0,0,223,224,5,105,0,0,224,225,5,100,0,0,225,34,
        1,0,0,0,226,227,5,111,0,0,227,228,5,117,0,0,228,229,5,116,0,0,229,
        36,1,0,0,0,230,231,5,99,0,0,231,232,5,111,0,0,232,233,5,110,0,0,
        233,234,5,116,0,0,234,235,5,105,0,0,235,236,5,110,0,0,236,237,5,
        117,0,0,237,238,5,101,0,0,238,38,1,0,0,0,239,240,5,111,0,0,240,241,
        5,102,0,0,241,40,1,0,0,0,242,243,5,105,0,0,243,244,5,110,0,0,244,
        245,5,104,0,0,245,246,5,101,0,0,246,247,5,114,0,0,247,248,5,105,
        0,0,248,249,5,116,0,0,249,42,1,0,0,0,250,251,5,97,0,0,251,252,5,
        114,0,0,252,253,5,114,0,0,253,254,5,97,0,0,254,255,5,121,0,0,255,
        44,1,0,0,0,256,257,5,43,0,0,257,46,1,0,0,0,258,259,5,45,0,0,259,
        48,1,0,0,0,260,261,5,42,0,0,261,50,1,0,0,0,262,263,5,47,0,0,263,
        52,1,0,0,0,264,265,5,37,0,0,265,54,1,0,0,0,266,267,5,33,0,0,267,
        56,1,0,0,0,268,269,5,38,0,0,269,270,5,38,0,0,270,58,1,0,0,0,271,
        272,5,124,0,0,272,273,5,124,0,0,273,60,1,0,0,0,274,275,5,61,0,0,
        275,276,5,61,0,0,276,62,1,0,0,0,277,278,5,33,0,0,278,279,5,61,0,
        0,279,64,1,0,0,0,280,281,5,60,0,0,281,66,1,0,0,0,282,283,5,60,0,
        0,283,284,5,61,0,0,284,68,1,0,0,0,285,286,5,62,0,0,286,70,1,0,0,
        0,287,288,5,62,0,0,288,289,5,61,0,0,289,72,1,0,0,0,290,291,5,58,
        0,0,291,292,5,58,0,0,292,74,1,0,0,0,293,294,5,40,0,0,294,76,1,0,
        0,0,295,296,5,41,0,0,296,78,1,0,0,0,297,298,5,91,0,0,298,80,1,0,
        0,0,299,300,5,93,0,0,300,82,1,0,0,0,301,302,5,46,0,0,302,84,1,0,
        0,0,303,304,5,44,0,0,304,86,1,0,0,0,305,306,5,59,0,0,306,88,1,0,
        0,0,307,308,5,58,0,0,308,90,1,0,0,0,309,310,5,123,0,0,310,92,1,0,
        0,0,311,312,5,125,0,0,312,94,1,0,0,0,313,314,5,61,0,0,314,96,1,0,
        0,0,315,319,7,0,0,0,316,318,7,1,0,0,317,316,1,0,0,0,318,321,1,0,
        0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,98,1,0,0,0,321,319,1,0,0,
        0,322,334,5,48,0,0,323,330,7,2,0,0,324,326,5,95,0,0,325,324,1,0,
        0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,329,7,3,0,0,328,325,1,0,
        0,0,329,332,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,334,1,0,
        0,0,332,330,1,0,0,0,333,322,1,0,0,0,333,323,1,0,0,0,334,100,1,0,
        0,0,335,339,3,83,41,0,336,338,7,3,0,0,337,336,1,0,0,0,338,341,1,
        0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,102,1,0,0,0,341,339,1,
        0,0,0,342,344,7,4,0,0,343,345,7,5,0,0,344,343,1,0,0,0,344,345,1,
        0,0,0,345,347,1,0,0,0,346,348,7,3,0,0,347,346,1,0,0,0,348,349,1,
        0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,104,1,0,0,0,351,352,3,
        99,49,0,352,353,6,52,0,0,353,106,1,0,0,0,354,355,3,99,49,0,355,357,
        3,101,50,0,356,358,3,103,51,0,357,356,1,0,0,0,357,358,1,0,0,0,358,
        366,1,0,0,0,359,360,3,101,50,0,360,361,3,103,51,0,361,366,1,0,0,
        0,362,363,3,99,49,0,363,364,3,103,51,0,364,366,1,0,0,0,365,354,1,
        0,0,0,365,359,1,0,0,0,365,362,1,0,0,0,366,367,1,0,0,0,367,368,6,
        53,1,0,368,108,1,0,0,0,369,374,8,6,0,0,370,374,3,111,55,0,371,372,
        5,92,0,0,372,374,5,34,0,0,373,369,1,0,0,0,373,370,1,0,0,0,373,371,
        1,0,0,0,374,110,1,0,0,0,375,376,5,92,0,0,376,377,7,7,0,0,377,112,
        1,0,0,0,378,382,5,34,0,0,379,381,3,109,54,0,380,379,1,0,0,0,381,
        384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,
        382,1,0,0,0,385,386,5,34,0,0,386,387,6,56,2,0,387,114,1,0,0,0,388,
        389,5,47,0,0,389,390,5,42,0,0,390,394,1,0,0,0,391,393,9,0,0,0,392,
        391,1,0,0,0,393,396,1,0,0,0,394,395,1,0,0,0,394,392,1,0,0,0,395,
        397,1,0,0,0,396,394,1,0,0,0,397,398,5,42,0,0,398,399,5,47,0,0,399,
        400,1,0,0,0,400,401,6,57,3,0,401,116,1,0,0,0,402,403,5,47,0,0,403,
        404,5,47,0,0,404,408,1,0,0,0,405,407,8,8,0,0,406,405,1,0,0,0,407,
        410,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,
        408,1,0,0,0,411,412,6,58,3,0,412,118,1,0,0,0,413,415,7,9,0,0,414,
        413,1,0,0,0,415,416,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,
        418,1,0,0,0,418,419,6,59,3,0,419,120,1,0,0,0,420,424,5,34,0,0,421,
        423,3,109,54,0,422,421,1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,
        425,1,0,0,0,425,430,1,0,0,0,426,424,1,0,0,0,427,431,7,10,0,0,428,
        429,5,13,0,0,429,431,5,10,0,0,430,427,1,0,0,0,430,428,1,0,0,0,431,
        432,1,0,0,0,432,433,6,60,4,0,433,122,1,0,0,0,434,435,5,92,0,0,435,
        436,8,11,0,0,436,124,1,0,0,0,437,441,5,34,0,0,438,440,3,109,54,0,
        439,438,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,
        442,444,1,0,0,0,443,441,1,0,0,0,444,445,3,123,61,0,445,446,6,62,
        5,0,446,126,1,0,0,0,447,448,9,0,0,0,448,449,6,63,6,0,449,128,1,0,
        0,0,19,0,131,319,325,330,333,339,344,349,357,365,373,382,394,408,
        416,424,430,441,7,1,52,0,1,53,1,1,56,2,6,0,0,1,60,3,1,62,4,1,63,
        5
    ]

class MT22Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BOOL_LIT = 1
    AUTO = 2
    BREAK = 3
    BOOLEAN = 4
    DO = 5
    ELSE = 6
    FALSE = 7
    FLOAT = 8
    FOR = 9
    FUNCTION = 10
    IF = 11
    INTEGER = 12
    RETURN = 13
    STRING = 14
    TRUE = 15
    WHILE = 16
    VOID = 17
    OUT = 18
    CONTINUE = 19
    OF = 20
    INHERIT = 21
    ARRAY = 22
    ADD = 23
    SUB = 24
    MUL = 25
    DIV = 26
    MOD = 27
    NOT = 28
    AND = 29
    OR = 30
    EQUAL = 31
    DIFF = 32
    LT = 33
    LTE = 34
    GT = 35
    GTE = 36
    CONCAT = 37
    LP = 38
    RP = 39
    LSB = 40
    RSB = 41
    POINT = 42
    COMMA = 43
    SEMI = 44
    COLON = 45
    LCB = 46
    RCB = 47
    ASSIGN = 48
    ID = 49
    INT_LIT = 50
    FLOAT_LIT = 51
    STR_LIT = 52
    COMMENT = 53
    INLINE_COMMENT = 54
    WS = 55
    UNCLOSE_STRING = 56
    ILLEGAL_ESCAPE = 57
    ERROR_CHAR = 58

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'auto'", "'break'", "'boolean'", "'do'", "'else'", "'false'", 
            "'float'", "'for'", "'function'", "'if'", "'integer'", "'return'", 
            "'string'", "'true'", "'while'", "'void'", "'out'", "'continue'", 
            "'of'", "'inherit'", "'array'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'!'", "'&&'", "'||'", "'=='", "'!='", "'<'", "'<='", 
            "'>'", "'>='", "'::'", "'('", "')'", "'['", "']'", "'.'", "','", 
            "';'", "':'", "'{'", "'}'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "BOOL_LIT", "AUTO", "BREAK", "BOOLEAN", "DO", "ELSE", "FALSE", 
            "FLOAT", "FOR", "FUNCTION", "IF", "INTEGER", "RETURN", "STRING", 
            "TRUE", "WHILE", "VOID", "OUT", "CONTINUE", "OF", "INHERIT", 
            "ARRAY", "ADD", "SUB", "MUL", "DIV", "MOD", "NOT", "AND", "OR", 
            "EQUAL", "DIFF", "LT", "LTE", "GT", "GTE", "CONCAT", "LP", "RP", 
            "LSB", "RSB", "POINT", "COMMA", "SEMI", "COLON", "LCB", "RCB", 
            "ASSIGN", "ID", "INT_LIT", "FLOAT_LIT", "STR_LIT", "COMMENT", 
            "INLINE_COMMENT", "WS", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
            "ERROR_CHAR" ]

    ruleNames = [ "BOOL_LIT", "AUTO", "BREAK", "BOOLEAN", "DO", "ELSE", 
                  "FALSE", "FLOAT", "FOR", "FUNCTION", "IF", "INTEGER", 
                  "RETURN", "STRING", "TRUE", "WHILE", "VOID", "OUT", "CONTINUE", 
                  "OF", "INHERIT", "ARRAY", "ADD", "SUB", "MUL", "DIV", 
                  "MOD", "NOT", "AND", "OR", "EQUAL", "DIFF", "LT", "LTE", 
                  "GT", "GTE", "CONCAT", "LP", "RP", "LSB", "RSB", "POINT", 
                  "COMMA", "SEMI", "COLON", "LCB", "RCB", "ASSIGN", "ID", 
                  "INT_PART", "DEC_PART", "EXP_PART", "INT_LIT", "FLOAT_LIT", 
                  "STR_CHAR", "ESC_SEQ", "STR_LIT", "COMMENT", "INLINE_COMMENT", 
                  "WS", "UNCLOSE_STRING", "ILLEGAL_ESC", "ILLEGAL_ESCAPE", 
                  "ERROR_CHAR" ]

    grammarFileName = "MT22.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[52] = self.INT_LIT_action 
            actions[53] = self.FLOAT_LIT_action 
            actions[56] = self.STR_LIT_action 
            actions[60] = self.UNCLOSE_STRING_action 
            actions[62] = self.ILLEGAL_ESCAPE_action 
            actions[63] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text.replace('_', '')
     

    def FLOAT_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text.replace('_', '')
     

    def STR_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            if self.text[-1] == '\n':
            	if self.text[-2] == '\r':
            		raise UncloseString(self.text[1:-2]);
            	else:
            		raise UncloseString(self.text[1:-1]);
            else:
            	raise UncloseString(self.text[1:]);

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            raise IllegalEscape(self.text[1:])
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            raise ErrorToken(self.text)
     


